def issueKey = issue.key

// Fetch the issue details with changelog data
def response = get("/rest/api/3/issue/${issueKey}?expand=changelog")
    .header('Content-Type', 'application/json')
    .asObject(Map)

// Add a 3-second delay to avoid duplicate triggers
logger.info("Adding 3-second delay to avoid duplicate triggers.")
Thread.sleep(3000)

// Check if the response is successful
if (response.status == 200 && response.body) {
    def issueResult = response.body
    def changelogEntries = issueResult.changelog.histories

    // Get the most recent changelog entry
    def latestChange = changelogEntries.sort { it.created }.last()
    logger.info("${latestChange}")

    // Check if only 'status' field was changed
    def nonStatusChanges = latestChange.items.findAll { it.field != "status" }
    logger.info("${nonStatusChanges}")
    
    // Exit if there are changes other than 'status'
    if (nonStatusChanges) {
        logger.info("Rule exited: Changes detected other than status.")
        return
    }

    // Collect the most recent status change
    def toStatusId = changelogEntries.collectMany { entry -> entry.items.findAll { it.field == "status" }.collect { 
        item -> [toStatusId: item.to ?: "N/A", created: entry.created] }}.sort { it.created }.last().toStatusId

    if (toStatusId) {
        logger.info("Triggered for issue ${issueKey}, current status ID: ${toStatusId}")

        // Handle different status cases
        if (toStatusId == "10367") { // Team members - снабженцы
            def teamMembers = issueResult.fields.customfield_10342 ?: []
            if (teamMembers.isEmpty()) {
                logger.info("No team members found.")
                return
            }   
            // Check if the comment already exists to prevent duplicates
            def existingCommentsResponse = get("/rest/api/3/issue/${issueKey}/comment")
                .header('Content-Type', 'application/json')
                .asObject(Map)

           if (existingCommentsResponse.status == 200 && existingCommentsResponse.body?.comments) {
            def existingComments = existingCommentsResponse.body.comments
            logger.info("Existing comments: ${existingComments}") // Log the existing comments

            // Check if the comment with the specific text has already been posted
            def isCommentAlreadyPosted = existingComments.any { comment ->
                comment.body.content.flatten().any { element ->
                element.content?.any { textElement -> 
                textElement.text?.trim() == "К Вам поступила"
            }
        }
    }
            if (isCommentAlreadyPosted) {
            logger.info("Comment already posted: ${isCommentAlreadyPosted}") // This will log true
            return } }

            def mentions = teamMembers.collect { user ->
                ["type": "listItem", "content": [["type": "paragraph", "content": [["type": "mention", "attrs": ["id": user.accountId, "text": "@" + user.displayName]]]]]]
            }
            postComment(issueKey, mentions, "К Вам поступила", true)

            // Update participants
            def currentParticipantsField = issueResult.fields.customfield_10029
            def currentParticipants = currentParticipantsField?.collect { user -> user.accountId } ?: []
            def updatedParticipants = (currentParticipants + teamMembers.collect { it.accountId }).unique()

            def bodyParticipants = [fields: [customfield_10029: updatedParticipants.collect { accountId -> [accountId: accountId] }]]
            put("/rest/api/3/issue/${issueKey}")
                .header('Content-Type', 'application/json')
                .body(bodyParticipants)
                .asObject(Map)

            return

        } else if (toStatusId == "10361") { // Director
            def director = issueResult.fields.customfield_10143 ?: []
            if (director.isEmpty()) {
                logger.info("No director found.")
                return
            }
            def mentions = director.collect { user ->
                ["type": "listItem", "content": [["type": "paragraph", "content": [["type": "mention", "attrs": ["id": user.accountId, "text": "@" + user.displayName]]]]]]
            }
            postComment(issueKey, mentions, "Требуется Ваше согласование.")
            return

        } else if (toStatusId == "10189") { // Supply chain manager
            def supplyManager = issueResult.fields.customfield_10326
            if (!supplyManager) {
                logger.info("No supply manager found.")
                return
            }
            def mentions = [["type": "listItem", "content": [["type": "paragraph", "content": [["type": "mention", "attrs": ["id": supplyManager.accountId, "text": "@" + supplyManager.displayName]]]]]]]
            postComment(issueKey, mentions, "Заявитель пожаловался на выполнение заявки. Пожалуйста нажмите на кнопку взять в работу.")
            return

        } else if (toStatusId == "10369") { // Reporter
            def reporter = issueResult.fields.reporter
            def mentions = [["type": "listItem", "content": [["type": "paragraph", "content": [["type": "mention", "attrs": ["id": reporter.accountId, "text": "@" + reporter.displayName]]]]]]]
            postComment(issueKey, mentions, "Информации недостаточно, ознакомьтесь с комментарием исполнителя.")
            return

        } else {
            logger.info("Status does not match any predefined actions.")
        }
    } else {
        logger.info("No status changes found.")
    }
} else {
    logger.info("Failed to fetch issue details or response is empty.")
}

// Helper function to post a comment with optional link
def postComment(issueKey, mentions, messageText, includeLink = false) {
    def linkContent = includeLink ? [
        ["type": "text", "text": " заявка ", "marks": [["type": "link", "attrs": ["href": "https://xxx.atlassian.net/servicedesk/customer/portal/25/${issueKey}"]]]],
        ["type": "text", "text": " на выполнение. Пожалуйста пройдите по ссылке, ознакомьтесь и нажмите на кнопку "],
        ["type": "text", "text": "Взять в работу.", "marks": [["type": "strong"]]]
    ] : []

    def body = ["body": ["version": 1, "type": "doc", "content": [
        ["type": "bulletList", "content": mentions],
        ["type": "paragraph", "content": [
            ["type": "text", "text": messageText]
        ] + linkContent]
    ]]]

    post("/rest/api/3/issue/${issueKey}/comment")
        .header('Content-Type', 'application/json')
        .body(body)
        .asObject(Map)
}
return
